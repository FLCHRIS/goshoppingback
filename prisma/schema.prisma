// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ImageUser {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  url       String?
  publicId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User {
  id        Int         @id @default(autoincrement())
  userName  String
  password  String
  email     String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  products  Product[]
  orders    Order[]
  image     ImageUser?
  favorites Favorites[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model ImageProduct {
  id        Int      @id @default(autoincrement())
  productId Int
  url       String?
  publicId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Product {
  id              Int               @id @default(autoincrement())
  userId          Int
  categoryId      Int
  name            String
  description     String            @db.Text
  price           Float
  stock           Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  user            User              @relation(fields: [userId], references: [id])
  category        Category          @relation(fields: [categoryId], references: [id])
  images          ImageProduct[]
  orderItems      OrderItem[]
  favorites       Favorites[]
  FavoriteProduct FavoriteProduct[]
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  total      Float
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderItems OrderItem[]
}

model OrderItem {
  orderId   Int
  productId Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

model Favorites {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  userId          Int
  products        Product[]
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FavoriteProduct FavoriteProduct[]
}

model FavoriteProduct {
  id         Int       @id @default(autoincrement())
  favoriteId Int
  productId  Int
  favorite   Favorites @relation(fields: [favoriteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
